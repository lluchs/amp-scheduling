#!/bin/zsh

set -eu

# Configuration

# CPUs used for ultmigration
export FAST_CPU=0 SLOW_CPU=2
# CPU used for power monitoring.
OTHER_CPU=11

# Command for reading the power meter.
powermeter() {
	taskset -c $OTHER_CPU ssh i30pc34 sudo '~/src/ut71dmm/ut71dmm'
}

# Command for reading "Vcore" mainboard sensor
vcore() {
	while true; do
		cat /sys/class/hwmon/hwmon1/in0_input
		sleep 1
	done
}

# Path to build directory
BUILD=../build

# End configuration

cd ${0:A:h}

benchname=${1?benchmark name not set}
bd=results/$benchname
if [[ -e "$bd" ]]; then
	echo "Benchmark $benchname already exists"
	exit 2
fi
mkdir $bd

# On exit, kill all background jobs.
zshexit TRAPINT() {
	kill -SIGHUP 0
}

log() {
	echo $@ >> $bd/log
}

# Print log file output to allow following progress.
taskset -c $OTHER_CPU tail -f $bd/log &

log Benchmark configuration
log FAST_CPU=$FAST_CPU SLOW_CPU=$SLOW_CPU
log OTHER_CPU=$OTHER_CPU
log

log Setting P-states...
# Set P-states to make everything reproducable.
sudo $BUILD/tools/amdpstate def 0 CpuVid=28  CpuFid=144 # 1.2 V / 3600 MHz
sudo $BUILD/tools/amdpstate def 1 CpuVid=46  CpuFid=100 # 1.0 V / 2500 MHz
sudo $BUILD/tools/amdpstate def 2 CpuVid=106 CpuFid=50  # 0.8 V /  800 MHz

echo userspace | sudo tee /sys/devices/system/cpu/cpu[0-9]*/cpufreq/scaling_governor > /dev/null
# Set the first core to the middle p-state, rest to the last. (zsh arrays are indexed from 1)
frequencies=("${=$(< /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies)}")
echo "${frequencies[3]}" | sudo tee /sys/devices/system/cpu/cpu[0-9]*/cpufreq/scaling_setspeed > /dev/null
echo "${frequencies[2]}" | sudo tee /sys/devices/system/cpu/cpu{0,1}/cpufreq/scaling_setspeed > /dev/null

sudo $BUILD/tools/amdpstate -call frequency 1000 >> $bd/log
log

log $(date -Ins) Benchmark start

# Add timestamp to input. Simple reimplementation of ts from moreutils.
ts() {
	taskset -c $OTHER_CPU awk '{print strftime("%FT%T%z"), $0; fflush()}'
}

# Start monitoring power.
powermeter |& ts > $bd/powermeter &
sudo taskset -c $OTHER_CPU stdbuf -oL $BUILD/tools/amdpstate rapl 1000 |& ts > $bd/rapl &
vcore |& ts > $bd/vcore &

for pstate in $(seq 3); do
	echo "${frequencies[$pstate]}" | sudo tee /sys/devices/system/cpu/cpu[0-9]*/cpufreq/scaling_setspeed > /dev/null
	sleep 1
	log $(date -Ins) start idle pstate $pstate
	sleep 20
	log $(date -Ins) end idle pstate $pstate
	sleep 5
done

for pstate in $(seq 3); do
	echo "${frequencies[$pstate]}" | sudo tee /sys/devices/system/cpu/cpu[0-9]*/cpufreq/scaling_setspeed > /dev/null
	$BUILD/test/ult_idle slow &
	sleep 1
	log $(date -Ins) start mwait pstate $pstate
	sleep 20
	log $(date -Ins) end mwait pstate $pstate
	kill -SIGTERM %%
	sleep 5
done

for pstate in $(seq 3); do
	# Set given P-state on other CCX only, same CCX stays at lowest P-state.
	echo "${frequencies[3]}" | sudo tee /sys/devices/system/cpu/cpu[0-9]*/cpufreq/scaling_setspeed > /dev/null
	echo "${frequencies[$pstate]}" | sudo tee /sys/devices/system/cpu/cpu{6,7}/cpufreq/scaling_setspeed > /dev/null
	$BUILD/test/ult_idle slow &
	sleep 1
	log $(date -Ins) start mwait pstate_other $pstate
	sleep 20
	log $(date -Ins) end mwait pstate_other $pstate
	kill -SIGTERM %%
	sleep 5
done

for pstate in $(seq 3); do
	# Set given P-state on one core of the same CCX only (usual migration scenario).
	echo "${frequencies[3]}" | sudo tee /sys/devices/system/cpu/cpu[0-9]*/cpufreq/scaling_setspeed > /dev/null
	echo "${frequencies[$pstate]}" | sudo tee /sys/devices/system/cpu/cpu{0,1}/cpufreq/scaling_setspeed > /dev/null
	# MWAIT on slow core (as other benchmark runs).
	$BUILD/test/ult_idle fast &
	sleep 1
	log $(date -Ins) start mwait pstate_same $pstate
	sleep 20
	log $(date -Ins) end mwait pstate_same $pstate
	kill -SIGTERM %%
	sleep 5
done

for cpuvid in 46 37 28; do
	# Try changing CpuVid for P-state 0
	sudo $BUILD/tools/amdpstate def 0 CpuVid=$cpuvid
	echo "${frequencies[1]}" | sudo tee /sys/devices/system/cpu/cpu[0-9]*/cpufreq/scaling_setspeed > /dev/null
	$BUILD/test/ult_idle slow &
	sleep 1
	log $(date -Ins) start mwait cpuvid $cpuvid
	sleep 20
	log $(date -Ins) end mwait cpuvid $cpuvid
	kill -SIGTERM %%
	sleep 5
done

log $(date -Ins) Benchmark end
